import string, time, os


input = '''         A           
         A           
  #######.#########  
  #######.........#  
  #######.#######.#  
  #######.#######.#  
  #######.#######.#  
  #####  B    ###.#  
BC...##  C    ###.#  
  ##.##       ###.#  
  ##...DE  F  ###.#  
  #####    G  ###.#  
  #########.#####.#  
DE..#######...###.#  
  #.#########.###.#  
FG..#########.....#  
  ###########.#####  
             Z       
             Z       '''


# input = '''                   A               
#                    A               
#   #################.#############  
#   #.#...#...................#.#.#  
#   #.#.#.###.###.###.#########.#.#  
#   #.#.#.......#...#.....#.#.#...#  
#   #.#########.###.#####.#.#.###.#  
#   #.............#.#.....#.......#  
#   ###.###########.###.#####.#.#.#  
#   #.....#        A   C    #.#.#.#  
#   #######        S   P    #####.#  
#   #.#...#                 #......VT
#   #.#.#.#                 #.#####  
#   #...#.#               YN....#.#  
#   #.###.#                 #####.#  
# DI....#.#                 #.....#  
#   #####.#                 #.###.#  
# ZZ......#               QG....#..AS
#   ###.###                 #######  
# JO..#.#.#                 #.....#  
#   #.#.#.#                 ###.#.#  
#   #...#..DI             BU....#..LF
#   #####.#                 #.#####  
# YN......#               VT..#....QG
#   #.###.#                 #.###.#  
#   #.#...#                 #.....#  
#   ###.###    J L     J    #.#.###  
#   #.....#    O F     P    #.#...#  
#   #.###.#####.#.#####.#####.###.#  
#   #...#.#.#...#.....#.....#.#...#  
#   #.#####.###.###.#.#.#########.#  
#   #...#.#.....#...#.#.#.#.....#.#  
#   #.###.#####.###.###.#.#.#######  
#   #.#.........#...#.............#  
#   #########.###.###.#############  
#            B   J   C               
#            U   P   P               '''


# input = '''                                 T Z     P       J     A       Y           U                             
#                                  D Z     C       R     I       Q           D                             
#   ###############################.#.#####.#######.#####.#######.###########.###########################  
#   #.#.......#...#.................#...#.#.....#.....#.......#.#.......#.....#.....#...................#  
#   #.###.#######.###########.#.#.#.###.#.#####.###.#.#.#######.#####.###.#####.#####.#######.###.#.###.#  
#   #...#.#...#...#.#.#.......#.#.#.....#.#.......#.#.#.#.....#.......#...................#.#...#.#.#.#.#  
#   ###.#.#.#####.#.#.#.#.#.#.###.#######.#.#.#.###.###.#.###.#.#.#.#########.###.#########.#####.###.###  
#   #.......#.#.....#.#.#.#.#...#.......#...#.#...#...#.....#.#.#.#.#.......#...#.........#.....#.#.#...#  
#   ###.#####.#####.#.#####.#########.###.###.#####.#########.#.#####.#.###.#.###.###.#.###.#######.#.###  
#   #...#.....#.#.#...#...#.#.....#.#...#.#...#.....#.....#...#.....#.#...#...#.#...#.#...#...#.....#...#  
#   ###.#.###.#.#.###.#.###.###.#.#.###.#.###.#.#.###.#.#.#.#.#.###.#####.#####.#####.#####.###.#######.#  
#   #...#.#.#...#.........#.#.#.#.....#.#...#.#.#...#.#.#...#.#.#.#.#...........#.#.....#...#...#...#.#.#  
#   ###.###.#.#########.#####.###.###.#.#.#.#######.###.#.#.###.#.#####.#.###.###.#######.#.#.#####.#.#.#  
#   #.....#...#.#...#...#.....#.#.#.....#.#.#...#...#...#.#.#.........#.#...#...#.#...#.#.#.....#.#.....#  
#   ###.#####.#.###.###.#####.#.#.###.#.###.#.#.#.#####.#####.#######.###.###.###.###.#.###.###.#.###.###  
#   #.#.#.#.....#.#.#...........#...#.#...#...#.#.....#.....#.....#...#.#.#.....#.........#...#.#.#.....#  
#   #.#.#.###.###.#.#.#########.#.###.#####.#####.#.#####.###.#######.#.#####.###.#########.#####.#####.#  
#   #.......#.#.........#.#.#.....#.#.#.#.#...#.#.#...#.#.#.#.#.#...#...#.#.....................#.#.#.#.#  
#   ###.###.#.#####.#####.#.#####.#.###.#.#.###.###.###.#.#.###.#.###.###.###.#######.#####.#.###.#.#.#.#  
#   #.#...#.#.#.#...#...#...#.#...#.......#...#.#.#...#.....#...#...........#.....#.#...#.#.#.#.........#  
#   #.#####.#.#.#####.###.###.###.###.###.#.###.#.###.#.#######.#.#####.#####.#####.#.###.#######.###.###  
#   #.#.#.#.........#.#.....#.......#.#.........#.#...#.....#.#...#...#.#.#.........#.#.#.#.....#.#...#.#  
#   #.#.#.#.#########.#####.#####.###.#.#.#.#.###.#.#####.#.#.###.#.#.###.#.###.###.###.#.#.###.#.###.#.#  
#   #.....#.......#...#.....#.#.....#.#.#.#.#...#.....#...#.....#...#...#.....#.#...#.#.....#...#...#.#.#  
#   ###.#####.#######.#####.#.###.#######.#######.#########.###.#.###.#####.#########.###.#####.#####.#.#  
#   #...#.#...#.#...#...#.....#.......#.......#.......#.....#...#.#.....#.....#.......#...#.#.#.#.......#  
#   #.#.#.###.#.###.#.#####.#####.#########.#######.#######.#########.#####.#####.#######.#.#.#######.###  
#   #.#.#.#.......#...#.....#    Y         M       R       H         J     H    #...#.#...#.......#...#.#  
#   #.###.#####.###.###.#####    Q         F       C       G         R     Z    ###.#.###.###.#######.#.#  
#   #...............#.......#                                                   #.#.......#.....#.......#  
#   ###.#.#####.###.#.#.#.###                                                   #.#.#######.#####.#.#.###  
#   #...#.#.#...#.....#.#...#                                                 DD....#.#.....#...#.#.#....HG
#   ###.###.#####.###.#####.#                                                   ###.#.###.###.#########.#  
# DD..#.....#.#.#.#.#...#....CC                                                 #.....#...#.#.#...#.#.#.#  
#   #.#.#.###.#.###.#.#######                                                   #.#######.#.#.#.#.#.#.#.#  
#   #...#.#.....#...#.#.....#                                                   #.#.#.#.....#...#.#.....#  
#   ###########.###.#####.###                                                   #.###.#.#.#####.#######.#  
#   #.......#.........#.....#                                                   #.......#...............#  
#   #.#####.#.#####.###.###.#                                                   #########################  
#   #.#.#.....#...#.#.....#..QE                                               PN........................#  
#   ###.###.###.###.#.#######                                                   ###.#.#.###.#.#.#.#.###.#  
#   #.....#.#...#...........#                                                   #.#.#.#...#.#.#.#.#...#.#  
#   #.#.#.#.###.#####.#.#.###                                                   #.#.###.###.#.#####.###.#  
# ER..#.#...#.#.#...#.#.#...#                                                   #.#...#.#...#.#.......#..HZ
#   #########.#.###.#########                                                   #.###.#.###.#########.#.#  
#   #.....................#..PC                                               FA..#.#.#.#.....#.#.#...#.#  
#   #.#####.#.###.#.#.###.#.#                                                   #.#.###########.#.#####.#  
# KW....#...#.#...#.#.#...#.#                                                   #.#.#.#.....#.#.......#.#  
#   #.###.#####.###.#####.#.#                                                   #.#.#.###.###.#.#########  
#   #.#.....#...#.#...#...#.#                                                   #.......#.......#.....#.#  
#   #.#.#.#####.#.#.###.#.#.#                                                   #####.#######.#.#.#.###.#  
#   #.#.#.#...#.#...#...#...#                                                   #.#...........#...#......ZU
#   #######.#####.###########                                                   #.#######.###########.###  
#   #...#.#.#.#.....#.......#                                                   #...#.....#...#.....#...#  
#   #.###.#.#.###.#.#####.#.#                                                   #.###.###.###.#.###.#####  
# XZ....#.#.#.#.#.#.#.#...#.#                                                   #...#.#.#.#.....#.......#  
#   #.###.#.#.#.#####.###.#.#                                                   #.#####.#######.###.###.#  
#   #...#...#.#.#.#.#.#...#..KW                                               XI..................#...#..CC
#   ###.#.#.#.#.#.#.#.###.###                                                   ###################.#.#.#  
#   #.....#.................#                                                   #.........#.......#.#.#.#  
#   ###.#.#.###.#####.#######                                                   #.#####.#.#.###.#.#######  
# RC..#.#.#...#.#.#.....#.#..JC                                               TD..#.....#...#.#.#...#...#  
#   #.###########.#######.#.#                                                   #.###.#.#.###.#.#####.###  
#   #...#.#.#.........#...#.#                                                   #.#...#.#.#.#...#........PN
#   #.###.#.###.###.#.#.#.#.#                                                   #########.#.#.###.#####.#  
#   #...........#...#...#...#                                                   #.#.....#.#.#.........#.#  
#   #########################                                                   #.#####.###.#############  
#   #...............#.......#                                                   #.#.........#.......#....VD
#   ###.#.#########.#.###.###                                                   #.###.#.###.#.#.#.#.###.#  
#   #.#.#.#...#.........#.#..UD                                               TS....#.#...#...#.#.#.....#  
#   #.#.###.#######.#.###.#.#                                                   #.#.#.###.#.###.###.###.#  
#   #...#.....#.#...#.#...#.#                                                 AI..#.#...#.#.#.#.#.....#.#  
#   #.#####.###.#########.#.#                                                   ###.#.#######.#####.###.#  
# FA..#...#.....#...#.#.#...#                                                   #.#.....#...#...#...#....GB
#   ###.###.#####.###.#.#####                                                   #.#######.#####.#########  
#   #...#.....#..............ZU                                               WA....#...........#.......#  
#   #.#.###.#.#.#####.###.#.#                                                   ###.#.#####.###.#.###.###  
#   #.#.#...#.#.#.#...#...#.#                                                   #.....#.#.....#.#.#.....#  
#   #.#.#.#.#.#.###.#####.###                                                   #.#.###.#######.#.###.#.#  
#   #.#.#.#.#.#...#.#.....#.#                                                   #.#.....#.......#...#.#..JC
#   #.#.#.###.###.#######.#.#                                                   #.#.###.#.#.###.###.###.#  
# TS..#.....#...........#...#                                                   #.#.#.#.#.#...#.....#...#  
#   #.#.#######.#.#.#.#######      E         V     X     K             E G      #####.#########.#.#.#.#.#  
#   #.#.#.......#.#.#.#.....#      E         D     Z     J             R B      #.#.#.....#.....#.#.#.#.#  
#   #.#######.#####.#######.#######.#########.#####.#####.#############.#.#######.#.#.###.###.#####.#####  
#   #.#.#.........#...#...#.....#.....#...#.....#...#...#.........#.#...#...............#.#...#.......#.#  
#   #.#.#####.###.#####.#####.#####.#.###.#####.#.###.#.#####.#.###.#.#######.#.#.###.###.###.###.#.###.#  
#   #.#.........#...#.#.............#.#.....#...#.#...#.#...#.#.#...#...#.....#.#.#...#.#.#...#...#...#.#  
#   #.#.###.#.###.###.#####.###.#.#.#####.###.###.#.###.#.#.###.#.#.###.###.#.#.#.#.#.#.###.###.#.###.#.#  
#   #.#...#.#.#.....#.......#.#.#.#...#.#...#...#.#.#...#.#.....#.#.....#...#.#.#.#.#.....#.#...#...#...#  
#   ###.###.###.###.#########.###.###.#.#.#####.#.#.#.###.#####.#.#.#####.#####.###.#######.#.#######.#.#  
#   #.#...#.#...#.....#.............#.#.........#...#...#.#.....#.#.#...#.#.#.#...#...#.#.#.#...#.....#.#  
#   #.#####.#######.#############.#.#######.#####.#.###.#.#####.#.###.#.#.#.#.###.#####.#.###########.#.#  
#   #.#.....#.............#.#.....#...#.......#.#.#.#.#.#.....#.#.....#.#.....#.#.#.........#.#.#.....#.#  
#   #.#.###.###.#.#.#.#####.###.#.###########.#.#####.#.#.#.#########.#.#####.#.###.#########.#.#.#.###.#  
#   #...#...#...#.#.#.#.....#...#.......#.......#.#.....#.#.#.#...#...#.#.#.#.................#.#.#.#.#.#  
#   ###.###.###.###.#######.#####.#.#########.###.#.#.#.#.###.#.###.###.#.#.#.#.#.#########.###.#####.#.#  
#   #.....#.#...#.#.#.............#...#.#.......#.#.#.#.#.......#.#.#.#.#.....#.#...#.#.............#...#  
#   #.#.###.#.###.#########.#####.#####.#.#####.#.#.###.###.###.#.###.#.#####.#####.#.#####.#######.#.#.#  
#   #.#.#...#...#...#.#.#.#.#.#.#.#...#...#.#.....#.#.....#.#...#...#.......#.#.#.#...#...........#.#.#.#  
#   #.#.#.#.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#######.#.#.###.#.#.#####.#####.#.#.#########.#.#########.#  
#   #.#.#.#.#...#.................#.#.#.#.#...#.#...#.#.#.#...#.#...#...#.#.#.#...........#.#.....#.....#  
#   ###.###.###########.#########.#.###.#####.#.###.###.#####.#####.###.#.#.#.#.#.###.#.#.###.###.#####.#  
#   #.#.#.#.#.........#...#.........#...#...#.....#...#...#...#.#.......#.......#...#.#.#.#.....#.#.....#  
#   #.###.#.###.###.#.#####.#.#.###.#####.#####.###.###.#####.#.###.#######.###.#####.#######.###.#####.#  
#   #.......#...#.#.#.#...#.#.#.#.....#...........#.....#.....#.....#...#.#...#.....#...#.......#.#.....#  
#   #####.###.#.#.###.###.#######.#######.#####.#####.###.###.###.#####.#.###.#.###.#.#.###.#.#######.#.#  
#   #.....#...#.#.......................#.....#...#.....#.#.....#.....#.......#.#...#.#...#.#.#.......#.#  
#   #################################.#.#####.#########.###.#######.#####.###############################  
#                                    X A     K         W   E       M     Q                                 
#                                    I A     J         A   E       F     E                                 '''

alphabet = string.ascii_uppercase
portals = {}
portal_pos = {}
steps = 0
erase = '\x1b[1A\x1b[2K'

def printMaze(maze, rows, cols):
    
    for i in range(0, rows):
        for j in range(0, cols):
            print(f"{maze[i][j]} ", end="")
        print()

    

def solveMaze(maze, i, j, rows, cols):

    global steps
    steps += 1

    print(f"Total number of steps: {steps}")
    if maze[i + 1][j] == 'e':
        maze[i][j] = 'v'
        exit(1)
    if maze[i][j + 1] == 'e':
        maze[i][j] = '>'
        exit(1)
    if maze[i - 1][j] == 'e':
        maze[i][j] = '^'
        exit(1)
    if maze[i][j - 1] == 'e':
        maze[i][j] = '<'
        exit(1)
    
    

    if type(maze[i + 1][j]) == int:         # portal bottom
        
        p = maze[i + 1][j]

        if maze[i][j + 1] == '<' or maze[i - 1][j] == 'v' or maze[i][j - 1] == '>':     # im entering an exit portal

            if portal_pos[p][0] == i + 1 and portal_pos[p][1] == j:   # if its entrance 
                #warp to exit
                solveMaze(maze, portal_pos[p][2], portal_pos[p][3], rows, cols)
            elif portal_pos[p][2] == i + 1 and portal_pos[p][3] == j:       # from exit portal you entered exit portal 
                #warp to entrance
                solveMaze(maze, portal_pos[p][0], portal_pos[p][1], rows, cols)
        else:
            pass
        
    elif type(maze[i][j + 1]) == int:       # portal right
        p = maze[i][j + 1]
        
        if portal_pos[p][0] == i and portal_pos[p][1] == j + 1:
            solveMaze(maze, portal_pos[p][2], portal_pos[p][3], rows, cols)
        elif portal_pos[p][2] == i and portal_pos[p][3] == j + 1:
            solveMaze(maze, portal_pos[p][0], portal_pos[p][1], rows, cols)

    elif type(maze[i - 1][j]) == int:       # portal up
        p = maze[i - 1][j]
        if portal_pos[p][0] == i - 1 and portal_pos[p][1] == j:
            solveMaze(maze, portal_pos[p][2], portal_pos[p][3], rows, cols)
        elif portal_pos[p][2] == i - 1 and portal_pos[p][3] == j: 
            solveMaze(maze, portal_pos[p][0], portal_pos[p][1], rows, cols)

    elif maze[i][j - 1].isdigit():       # portal left
        
        p = int(maze[i][j - 1])

        if maze[i + 1][j] == '^' or  maze[i][j + 1] == '<' or maze[i - 1][j] == 'v':     # im entering an exit portal
        
            if portal_pos[p][0] == i and portal_pos[p][1] == j - 1:
                solveMaze(maze, portal_pos[p][2], portal_pos[p][3], rows, cols)
            elif portal_pos[p][2] == i and portal_pos[p][3] == j - 1:
                solveMaze(maze, portal_pos[p][0], portal_pos[p][1], rows, cols)

        else:                                # im coming out of an exit portal
            pass



    if  maze[i + 1][j] == '.':
        maze[i + 1][j] = 'v'
        solveMaze(maze, i + 1, j, rows, cols)           # go down

    if maze[i][j + 1] == '.':
        maze[i][j + 1] = '>'
        solveMaze(maze, i, j + 1, rows, cols)           # go right


    if maze[i][j - 1] == '.':                           # go left
        maze[i][j - 1] = '<'
        solveMaze(maze, i, j - 1, rows, cols)

    if  maze[i - 1][j] == '.':                          # go up
        maze[i - 1][j] = '^'
        solveMaze(maze, i - 1, j, rows, cols)          



    #return False



def parseMaze(input):

    input = input.split('\n')

    cols = len(input[0])
    rows = len(input)
    
    maze = []
    for i in range(0, rows):
        _r = [char for char in input[i]]
        maze.append(_r)



    portal = 1
    # outer top part
    for i in range(0, 2):
        for j in range(0, cols):
            if maze[i][j] != ' ':
                if maze[i][j] == 'A' and maze[i + 1][j] == 'A':   
                    maze[i + 2][j] = 's'
                    maze[i][j] = ' '
                    maze[i + 1][j] = ' '
                    portal_pos['s'] = (i + 2, j)
                elif maze[i][j] == 'Z' and maze[i + 1][j] == 'Z':
                    maze[i + 2][j] = 'e'
                    maze[i][j] = ' '
                    maze[i + 1][j] = ' '
                    portal_pos['e'] = (i + 2, j)
                else:       # portal found
                    portals[maze[i][j] + maze[i + 1][j]] = portal # memorize
                    portal_pos[portal] = [0, 0, i, j]     # ((entrace_i, entrace_j), (exit_i, exit_j))
                    maze[i + 2][j] = str(portal)
                    maze[i][j] = ' '
                    maze[i + 1][j] = ' '
                    portal += 1


    # outer left part
    for i in range(0, rows):
        for j in range(0, 2):
            if maze[i][j] != ' ':
                if maze[i][j] == 'A' and maze[i][j + 1] == 'A':   
                    maze[i][j + 2] = 's'
                    maze[i][j] = ' '
                    maze[i][j + 1] = ' '
                    portal_pos['s'] = (i, j + 2)
                elif maze[i][j] == 'Z' and maze[i][j + 1] == 'Z':
                    maze[i][j + 2] = 'e'
                    maze[i][j] = ' '
                    maze[i][j + 1] = ' '
                    portal_pos['e'] = (i, j + 2)
                else:       # portal found
                    portals[maze[i][j] + maze[i][j + 1]] = portal # memorize
                    portal_pos[portal] = [0, 0, i, j + 2]
                    maze[i][j + 2] = str(portal)
                    maze[i][j] = ' '
                    maze[i][j + 1] = ' '
                    portal += 1

    # outer bottom part
    for i in range(rows - 1, rows - 2, -1):
        for j in range(0, cols):
            if maze[i][j] != ' ':
                if maze[i][j] == 'A' and maze[i - 1][j] == 'A':   
                    maze[i - 2][j] = 's'
                    maze[i][j] = ' '
                    maze[i - 1][j] = ' '
                    portal_pos['s'] = (i - 2, j)
                elif maze[i][j] == 'Z' and maze[i - 1][j] == 'Z':
                    maze[i - 2][j] = 'e'
                    maze[i][j] = ' '
                    maze[i - 1][j] = ' '
                    portal_pos['e'] = (i - 2, j)
                else:       # portal found
                    portals[maze[i - 1][j] + maze[i][j]] = portal # memorize
                    portal_pos[portal] = [0, 0, i - 2, j]
                    maze[i - 2][j] = str(portal)
                    maze[i][j] = ' '
                    maze[i - 1][j] = ' '
                    portal += 1


        # outer right part
    for i in range(0, rows):
        for j in range(cols - 1, cols - 2, -1):
            if maze[i][j] != ' ':
                if maze[i][j] == 'A' and maze[i][j - 1] == 'A':   
                    maze[i][j - 2] = 's'
                    maze[i][j] = ' '
                    maze[i][j - 1] = ' '
                    portal_pos['s'] = (i, j - 2)
                elif maze[i][j] == 'Z' and maze[i][j - 1] == 'Z':
                    maze[i][j - 2] = 'e'
                    maze[i][j] = ' '
                    maze[i][j - 1] = ' '    
                    portal_pos['e'] = (i, j - 2)
                else:       # portal found
                    portals[maze[i][j - 1] + maze[i][j]] = portal # memorize
                    portal_pos[portal] = [0, 0, i, j - 2]
                    maze[i][j - 2] = str(portal)
                    maze[i][j] = ' '
                    maze[i][j - 1] = ' '
                    portal += 1


  

  # parse inner portals

    for i in range(2, rows - 2):
      for j in range(2, cols - 2):
          if str(maze[i][j]) in alphabet: # portal found

            if maze[i + 1][j] in alphabet: # inner top part or bottom part

              if maze[i - 1][j] == '.':   # inner top part
                maze[i - 1][j] = portals[maze[i][j] + maze[i + 1][j]]
                portal_pos[portals[maze[i][j] + maze[i + 1][j]]][0] = i - 1
                portal_pos[portals[maze[i][j] + maze[i + 1][j]]][1] = j
                

              elif maze[i + 2][j] == '.': # inner bottom part
                maze[i + 2][j] = portals[maze[i][j] + maze[i + 1][j]]    
                portal_pos[portals[maze[i][j] + maze[i + 1][j]]][0] = i + 2 
                portal_pos[portals[maze[i][j] + maze[i + 1][j]]][1] = j

              maze[i][j] = ' '
              maze[i + 1][j] = ' '


            elif maze[i][j + 1] in alphabet: # inner left or right part

              if maze[i][j - 1] == '.':   # inner left
                maze[i][j - 1] = portals[maze[i][j] + maze[i][j + 1]]
                portal_pos[portals[maze[i][j] + maze[i][j + 1]]][0] = i 
                portal_pos[portals[maze[i][j] + maze[i][j + 1]]][1] = j - 1
                maze[i][j] = ' '
                maze[i][j + 1] = ' '
              elif maze[i][j + 2] == '.': # inner right
                maze[i][j + 2] = portals[maze[i][j] + maze[i][j + 1]]
                portal_pos[portals[maze[i][j] + maze[i][j + 1]]][0] = i 
                portal_pos[portals[maze[i][j] + maze[i][j + 1]]][1] = j + 2
                maze[i][j] = ' '
                maze[i][j + 1] = ' '
                
              

  
    #printMaze(maze, rows, cols)
    #print(portals)
    print(portal_pos)
    solveMaze(maze, portal_pos['s'][0], portal_pos['s'][1], rows, cols)
    print(f"Total number of steps: {steps}")
    
parseMaze(input)


